from flash1dkmeans import kmeans_1d
import numpy as np

random_floats = [0.7733201216652775, 0.8335873958778128, 0.8058989186543444, 0.9138675190576699, 0.960279632513804,
                 0.5469859540082354, 0.4437865978687342, 0.2137881414530367, 0.8735575614267727, 0.8986145648470134,
                 0.19043733156108378, 0.14641548252556202, 0.858638511790406, 0.5389519314245607, 0.3435409394659985,
                 0.08152415379113176, 0.5553110405181855, 0.3713394107930992, 0.910181216243834, 0.8390865925800198,
                 0.3116244840376611, 0.3008066596295216, 0.27843881774879, 0.802962532748909, 0.2172930228338822,
                 0.8566922711916609, 0.09280679644292411, 0.5040917198642608, 0.41640489099298905, 0.214639129483859,
                 0.3140198352246406, 0.672904177015031, 0.7754629820689617, 0.6182516687022158, 0.2980501091421446,
                 0.26391134813365313, 0.03374370274299421, 0.19620403523107932, 0.8634100520366015,
                 0.020570205890363957, 0.22084743412141528, 0.20749327331140266, 0.14963174803654855,
                 0.009319869307448991, 0.4390474579618773, 0.49611217603294067, 0.3830620997195504, 0.30456276370153645,
                 0.7317190202097824, 0.7001983262914004, 0.9802735358497979, 0.2962689892503546, 0.42869930488358865,
                 0.10352645108683856, 0.7776481263570685, 0.5079589606172529, 0.9952798679946918, 0.47862085229849904,
                 0.3858967440043365, 0.191257010543464, 0.506335089673548, 0.8923568873843354, 0.40835067864368046,
                 0.7754664867790264, 0.9021451804662921, 0.11589824381692859, 0.988106825091435, 0.9766792533274433,
                 0.25411020812783247, 0.4653153806716832, 0.8424725740742849, 0.48709571029002163, 0.6196473292136112,
                 0.01565088732911446, 0.5872137814197382, 0.042649501884094665, 0.4489995036004639, 0.6445524766337754,
                 0.08428625964355763, 0.7562598534954077, 0.3425985929566131, 0.05294778591247129, 0.48613375349904964,
                 0.5205706697508917, 0.6550955054819608, 0.31992424803722985, 0.11694275815674393, 0.525684203653553,
                 0.11619768757810134, 0.11688715687037443, 0.478192463231809, 0.2929576958397001, 0.9720571474232212,
                 0.7078188062882791, 0.2962472252625279, 0.8913117510861226, 0.105021744659342, 0.720803261791298,
                 0.23519604709271402, 0.4443070872678613]

# check that the 2 cluster case is deterministic
centroids_1, cluster_borders_1 = kmeans_1d(random_floats, n_clusters=2)
centroids_2, cluster_borders_2 = kmeans_1d(random_floats, n_clusters=2)

print(centroids_1, centroids_2)

assert np.all(centroids_1 == centroids_2) and np.all(cluster_borders_1 == cluster_borders_2)
print("Checked that the 2 cluster case is deterministic")

# check that the k-cluster case is NOT deterministic

centroids_1, cluster_borders_1 = kmeans_1d(random_floats, n_clusters=3)
centroids_2, cluster_borders_2 = kmeans_1d(random_floats, n_clusters=3)

print(centroids_1, centroids_2)

assert np.any(centroids_1 != centroids_2) or np.any(cluster_borders_1 != cluster_borders_2)
print("Checked that the k-cluster case is NOT deterministic")

# Now check that we can set random_state to get reproducable results

centroids_1, cluster_borders_1 = kmeans_1d(random_floats, n_clusters=3, random_state=42)
centroids_2, cluster_borders_2 = kmeans_1d(random_floats, n_clusters=3, random_state=42)

print(centroids_1, centroids_2)

assert np.all(centroids_1 == centroids_2) and np.all(cluster_borders_1 == cluster_borders_2)
print("Checked that setting random_state gives reproducable results")
